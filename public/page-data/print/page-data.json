{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"9ab4631c45b2a68b9eca","result":{"data":{"deck":{"id":"738a1ac6-0684-52f2-bff0-5e4f6b887cf7","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [3, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"Example\\\"\",\n    \"title\": \"\\\"Example\\\"\"\n  }), \"import React, { useState } from \\\"react\\\";\\nimport useSWR from \\\"swr\\\";\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsageDemo, {\n    mdxType: \"BasicUsageDemo\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:43\",\n    \"9:43\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsageDemo, {\n    mdxType: \"BasicUsageDemo\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:7,11\",\n    \"4:7,11\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsageDemo, {\n    mdxType: \"BasicUsageDemo\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsageDemo, {\n    mdxType: \"BasicUsageDemo\"\n  })))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState } from \\\"react\\\";\\nimport useSWR from \\\"swr\\\";\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"Let's build our own SWR!\\\"\",\n    \"subtitle\": \"\\\"Let's\",\n    \"build\": true,\n    \"our\": true,\n    \"own\": true,\n    \"SWR!\\\"\": true\n  }), \"import React, { useState } from \\\"react\\\";\\n\\nconst useSWR = {}\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"12\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState } from \\\"react\\\";\\n\\nconst useSWR = (key, fetcher) => {\\n  const [data, setData] = useState();\\n\\n  return { data };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState, useEffect } from \\\"react\\\";\\n\\nconst useSWR = (key, fetcher) => {\\n  const [data, setData] = useState();\\n\\n  useEffect(() => {\\n    async function fetch() {\\n      const newData = await fetcher(key);\\n      setData(newData);\\n    }\\n    fetch();\\n  }, [fetcher, key]);\\n\\n  return { data };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [3, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState, useEffect } from \\\"react\\\";\\n\\nconst useSWR = (key, fetcher) => {\\n  const [data, setData] = useState();\\n\\n  useEffect(() => {\\n    async function fetch() {\\n      const newData = await fetcher(key);\\n      setData(newData);\\n    }\\n    fetch();\\n  }, [fetcher, key]);\\n\\n  return { data };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage01, {\n    mdxType: \"BasicUsage01\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"Cache?\\\"\",\n    \"subtitle\": \"\\\"Cache?\\\"\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage01, {\n    mdxType: \"BasicUsage01\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3:15\\\"\",\n    \"3:15\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage01, {\n    mdxType: \"BasicUsage01\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState, useEffect, useRef } from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  useEffect(() => {\\n    async function fetch() {\\n      const newData = await fetcher(key);\\n\\n      keyRef.current = key;\\n      cache.set(key, newData);\\n\\n      setData(newData);\\n    }\\n    fetch();\\n  }, [fetcher, key]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage03, {\n    mdxType: \"BasicUsage03\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3:24 subtitle=\\\"Stale While Revalidate?\\\"\",\n    \"3:24\": true,\n    \"subtitle\": \"\\\"Stale\",\n    \"While\": true,\n    \"Revalidate?\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage03, {\n    mdxType: \"BasicUsage03\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3:24\",\n    \"3:24\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"50%\",\n      width: \"70%\",\n      fontSize: 26\n    }\n  }, mdx(\"span\", {\n    style: {\n      color: 'coral'\n    }\n  }, \"S\"), \"W\", mdx(\"span\", {\n    style: {\n      color: 'cornflowerblue'\n    }\n  }, \"R\"), \" is a strategy to\", mdx(\"p\", {\n    style: {\n      color: 'coral'\n    }\n  }, \"first return the data from cache (stale), \"), mdx(\"p\", {\n    style: {\n      color: 'cornflowerblue'\n    }\n  }, \"then send the fetch request (revalidate), \"), mdx(\"p\", null, \"  and finally come with the up-to-date data.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"14:26\",\n    \"14:26\": true\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    const newData = await fetcher(key);\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"50%\",\n      width: \"70%\",\n      fontSize: 26\n    }\n  }, mdx(\"span\", {\n    style: {\n      color: 'coral'\n    }\n  }, \"S\"), \"W\", mdx(\"span\", {\n    style: {\n      color: 'cornflowerblue'\n    }\n  }, \"R\"), \" is a strategy to\", mdx(\"p\", {\n    style: {\n      color: 'coral'\n    }\n  }, \"first return the data from cache (stale), \"), mdx(\"p\", {\n    style: {\n      color: 'cornflowerblue'\n    }\n  }, \"then send the fetch request (revalidate), \"), mdx(\"p\", null, \"  and finally come with the up-to-date data.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8:30 title=\\\"Caching\\\"\",\n    \"8:30\": true,\n    \"title\": \"\\\"Caching\\\"\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    const newData = await fetcher(key);\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage04Revalidate, {\n    mdxType: \"BasicUsage04Revalidate\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"37:71\",\n    \"37:71\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(BasicUsage04Revalidate, {\n    mdxType: \"BasicUsage04Revalidate\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    const newData = await fetcher(key);\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n  const { data: dupingData } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n\\n      {dupingData ? (\\n        <>\\n          <h2>{dupingData.full_name}</h2>\\n          <ul>\\n            <li>forks: {dupingData.forks_count}</li>\\n            <li>stars: {dupingData.stargazers_count}</li>\\n            <li>watchers: {dupingData.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoDeduping, {\n    mdxType: \"NoDeduping\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"39:40 subtitle=\\\"Request deduplication?\\\"\",\n    \"39:40\": true,\n    \"subtitle\": \"\\\"Request\",\n    \"deduplication?\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoDeduping, {\n    mdxType: \"NoDeduping\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:30\",\n    \"8:30\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoDeduping, {\n    mdxType: \"NoDeduping\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst CONCURRENT_PROMISES = {};\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    let newData;\\n    if (!CONCURRENT_PROMISES[key]) {\\n      CONCURRENT_PROMISES[key] = fetcher(key);\\n      newData = await CONCURRENT_PROMISES[key];\\n      \\n      delete CONCURRENT_PROMISES[key];\\n    } else {\\n      newData = await CONCURRENT_PROMISES[key];\\n    }\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n  const { data: dupingData } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n\\n      {dupingData ? (\\n        <>\\n          <h2>{dupingData.full_name}</h2>\\n          <ul>\\n            <li>forks: {dupingData.forks_count}</li>\\n            <li>stars: {dupingData.stargazers_count}</li>\\n            <li>watchers: {dupingData.watchers}</li>\\n          </ul>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(Deduplication, {\n    mdxType: \"Deduplication\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:40 title=\\\"Request Deduplication\\\"\",\n    \"8:40\": true,\n    \"title\": \"\\\"Request\",\n    \"Deduplication\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(Deduplication, {\n    mdxType: \"Deduplication\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"47:95\",\n    \"47:95\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(Deduplication, {\n    mdxType: \"Deduplication\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst CONCURRENT_PROMISES = {};\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    let newData;\\n    if (!CONCURRENT_PROMISES[key]) {\\n      CONCURRENT_PROMISES[key] = fetcher(key);\\n      newData = await CONCURRENT_PROMISES[key];\\n      \\n      delete CONCURRENT_PROMISES[key];\\n    } else {\\n      newData = await CONCURRENT_PROMISES[key];\\n    }\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`).then((r) =>\\n    r.json()\\n  );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n          <p>updated at: {data.updated_at}</p>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoRevalidate01, {\n    mdxType: \"NoRevalidate01\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"42:45\",\n    \"42:45\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoRevalidate01, {\n    mdxType: \"NoRevalidate01\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst CONCURRENT_PROMISES = {};\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    let newData;\\n    if (!CONCURRENT_PROMISES[key]) {\\n      CONCURRENT_PROMISES[key] = fetcher(key);\\n      newData = await CONCURRENT_PROMISES[key];\\n      \\n      delete CONCURRENT_PROMISES[key];\\n    } else {\\n      newData = await CONCURRENT_PROMISES[key];\\n    }\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  useEffect(() => {\\n    revalidate();\\n  }, [revalidate]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`)\\n    .then((r) => r.json())\\n    .then((r) =>\\n      Object.assign(r, {\\n        updated_at: new Date().toLocaleString(),\\n      })\\n    );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n          <p>updated at: {data.updated_at}</p>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoRevalidate02, {\n    mdxType: \"NoRevalidate02\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:40 subtitle=\\\"Let's revalidate on focus!\\\"\",\n    \"8:40\": true,\n    \"subtitle\": \"\\\"Let's\",\n    \"revalidate\": true,\n    \"on\": true,\n    \"focus!\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoRevalidate02, {\n    mdxType: \"NoRevalidate02\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"33:35\",\n    \"33:35\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(NoRevalidate02, {\n    mdxType: \"NoRevalidate02\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {\\n  useState,\\n  useEffect,\\n  useRef,\\n  useCallback,\\n} from \\\"react\\\";\\n\\nconst cache = new Map();\\n\\nconst CONCURRENT_PROMISES = {};\\n\\nconst useSWR = (key, fetcher) => {\\n  const keyRef = useRef(key);\\n  const [data, setData] = useState();\\n\\n  const revalidate = useCallback(async () => {\\n    let newData;\\n    if (!CONCURRENT_PROMISES[key]) {\\n      CONCURRENT_PROMISES[key] = fetcher(key);\\n      newData = await CONCURRENT_PROMISES[key];\\n      \\n      delete CONCURRENT_PROMISES[key];\\n    } else {\\n      newData = await CONCURRENT_PROMISES[key];\\n    }\\n\\n    keyRef.current = key;\\n    cache.set(key, newData);\\n\\n    setData(newData);\\n  }, [fetcher, key]);\\n\\n  const visibilityChangeListener = useCallback(() => {\\n    if (document.visibilityState === \\\"visible\\\")\\n      revalidate();\\n  }, [revalidate]);\\n\\n  useEffect(() => {\\n    // https://developer.mozilla.org/\\n    // en-US/docs/Web/API/Document/visibilitychange_event\\n    document.addEventListener(\\n      \\\"visibilitychange\\\",\\n      visibilityChangeListener\\n    );\\n    window.addEventListener(\\\"focus\\\", revalidate);\\n\\n    revalidate();\\n\\n    return () => {\\n      document.removeEventListener(\\n        \\\"visibilitychange\\\",\\n        visibilityChangeListener\\n      );\\n      window.removeEventListener(\\\"focus\\\", revalidate);\\n    };\\n  }, [revalidate, visibilityChangeListener]);\\n\\n  return {\\n    data: keyRef.current === key ? data : cache.get(key),\\n  };\\n};\\n\\nconst fetcher = (id) =>\\n  fetch(`https://api.github.com/repos/${id}`)\\n    .then((r) => r.json())\\n    .then((r) =>\\n      Object.assign(r, {\\n        updated_at: new Date().toLocaleString(),\\n      })\\n    );\\n\\nexport default function TrendingProjects() {\\n  const [id, setId] = useState(\\\"facebook/react\\\");\\n  const { data } = useSWR(id, fetcher);\\n\\n  return (\\n    <div>\\n      <h1>Trending Projects</h1>\\n\\n      <div>\\n        <button onClick={() => setId(\\\"facebook/react\\\")}>\\n          React\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"vercel/swr\\\")}>\\n          SWR\\n        </button>{\\\" \\\"}\\n        <button onClick={() => setId(\\\"TanStack/query\\\")}>\\n          TanStack Query\\n        </button>\\n      </div>\\n\\n      {data ? (\\n        <>\\n          <h2>{data.full_name}</h2>\\n          <ul>\\n            <li>forks: {data.forks_count}</li>\\n            <li>stars: {data.stargazers_count}</li>\\n            <li>watchers: {data.watchers}</li>\\n          </ul>\\n          <p>updated at: {data.updated_at}</p>\\n        </>\\n      ) : (\\n        <p>loading...</p>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(FocusRevalidate, {\n    mdxType: \"FocusRevalidate\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:61 title=\\\"Revalidate on Focus\\\"\",\n    \"8:61\": true,\n    \"title\": \"\\\"Revalidate\",\n    \"on\": true,\n    \"Focus\\\"\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(FocusRevalidate, {\n    mdxType: \"FocusRevalidate\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(FocusRevalidate, {\n    mdxType: \"FocusRevalidate\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      height: \"70%\",\n      width: \"70%\",\n      fontSize: 20\n    }\n  }, mdx(FocusRevalidate, {\n    mdxType: \"FocusRevalidate\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"738a1ac6-0684-52f2-bff0-5e4f6b887cf7","slug":"","title":""}}}